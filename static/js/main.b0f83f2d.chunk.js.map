{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","components/Header.js","containers/App.js","actions.js","reducers.js","serviceWorkerRegistration.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","id","name","email","username","className","alt","src","CardList","robots","map","user","SearchBox","searchChange","type","placeholder","onChange","Scroll","children","style","overflowY","height","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","stopRendering","prevProps","nextProps","Header","React","memo","connect","state","searchField","searchRobots","requestRobots","isPending","error","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","response","json","data","catch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b0f83f2d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\n// import './Card.css'\r\n\r\nconst Card = ({ id, name, email, username }) => {\r\n  return (\r\n    <div className=\"tc bg-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robo profile\" src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user) => {\r\n        return (\r\n          <Card\r\n            key={user.id}\r\n            id={user.id}\r\n            name={user.name}\r\n            email={user.email}\r\n            username={user.username}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        className=\"pa3 ba br3 bg-washed-green\"\r\n        type=\"search\"\r\n        placeholder=\"Search Robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport \"./Scroll.css\";\r\n\r\nconst Scroll = ({ children }) => {\r\n  return (\r\n    <div\r\n      className=\"scroller\"\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        height: \"800px\",\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\n//because it is promise, it is going to have 3 states:\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","import React from \"react\";\r\n\r\nconst stopRendering = (prevProps, nextProps) => {\r\n  return false;\r\n};\r\n\r\nfunction Header() {\r\n  return (\r\n    <div>\r\n      <h1 className=\"f2\">RoboFriends</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(Header, stopRendering);\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport \"./App.css\";\r\nimport Scroll from \"../components/Scroll\";\r\n\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\nimport Header from \"../components/Header\";\r\n\r\nconst App = ({\r\n  searchField,\r\n  onSearchChange,\r\n  robots,\r\n  isPending,\r\n  onRequestRobots,\r\n}) => {\r\n  useEffect(() => {\r\n    onRequestRobots();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const filteredRobots = robots.filter((robot) => {\r\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n  });\r\n\r\n  return isPending ? (\r\n    <h1 className=\"tc\">Loading ...</h1>\r\n  ) : (\r\n    <div className=\"tc\">\r\n      <Header />\r\n      <SearchBox searchChange={onSearchChange} />\r\n      <Scroll>\r\n        <CardList robots={filteredRobots} />\r\n      </Scroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchField: state.searchRobots.searchField,\r\n  robots: state.requestRobots.robots,\r\n  isPending: state.requestRobots.isPending,\r\n  error: state.requestRobots.error,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n  onRequestRobots: () => dispatch(requestRobots()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) =>\r\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n    );\r\n};\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\",\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://cra.link/PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport App from \"./containers/App.js\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport \"tachyons\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}